buildscript {
    ext {
        springBootVersion = '2.0.2.RELEASE'
    }
    repositories {
        mavenLocal()
        jcenter()

        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'io.spring.dependency-management' version '1.0.5.RELEASE'
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '3.2.1'
    id 'org.sonarqube' version '2.5'
    id 'org.springframework.boot' version '2.0.2.RELEASE'
    id 'pmd'
}

group = 'uk.gov.hmcts.reform.divorce'
version = '0.0.1'
sourceCompatibility = 1.8

bootJar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }

    archiveName 'div-case-orchestration-service.jar'
}

mainClassName = 'uk.gov.hmcts.reform.divorce.orchestration.OrchestrationServiceApplication'

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

repositories {
    mavenLocal()
    jcenter()

    maven { url 'https://artifactory.reform.hmcts.net/artifactory/libs-release' }
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url 'https://repo.spring.io/libs-milestone' }
}

checkstyle {
    toolVersion = '7.2'
    configFile = project(':').file('checkstyle.xml')
    configProperties = ["suppressionFile": project(':').file('suppressions.xml')]
}

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
}

def versions = [
        commonsIo                       : '2.5',
        commonsLang3                    : '3.7',
        springfoxSwagger                : '2.7.0',
        lombok                          : '1.16.16',
        puppyCrawl                      : '7.6',
        reformsJavaLogging              : '3.0.1',
        serviceTokenGenerator           : '1.0.0',
        feignHttpClient                 : '9.5.1',
        reformSpringBootAutoConfigure   : '1.1.0'
]

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile group: 'com.puppycrawl.tools', name: 'checkstyle', version: versions.puppyCrawl
    compile group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
    compile group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3

    compile (group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign')
            {
                exclude group: 'io.reactivex', module: 'io.reactivex'
                exclude group: 'io.reactivex', module: 'rxnetty'
                exclude group: 'io.reactivex', module: 'rxnetty-contexts'
                exclude group: 'io.reactivex', module: 'rxnetty-servo'
            }

    compile group: 'io.github.openfeign', name: 'feign-httpclient', version: versions.feignHttpClient
    compile group: 'uk.gov.hmcts.reform', name: 'http-proxy-spring-boot-autoconfigure', version: versions.reformSpringBootAutoConfigure

    compile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: versions.reformsJavaLogging
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: versions.reformsJavaLogging
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-httpcomponents', version: versions.reformsJavaLogging
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-spring', version: versions.reformsJavaLogging
    compile (group: 'uk.gov.hmcts.reform', name:'service-auth-provider-client', version: versions.serviceTokenGenerator)
        {
            exclude group: 'io.reactivex', module: 'io.reactivex'
            exclude group: 'io.reactivex', module: 'rxnetty'
            exclude group: 'io.reactivex', module: 'rxnetty-contexts'
            exclude group: 'io.reactivex', module: 'rxnetty-servo'
        }
    
    compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')

    runtime('org.springframework.boot:spring-boot-devtools')
}

pmd {
    toolVersion = "5.8.1"
    ignoreFailures = true
    sourceSets = [sourceSets.main, sourceSets.test]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("ruleset.xml")
}

def sonarExclusions = [
        '**uk/gov/hmcts/reform/divorce/orchestration/domain/**/*',
        '**uk/gov/hmcts/reform/divorce/orchestration/exception/*',
        '**uk/gov/hmcts/reform/divorce/orchestration/**/config/**/*',
        '**uk/gov/hmcts/reform/divorce/orchestration/OrchestrationServiceApplication.java'
]

sonarqube {
    properties {
        property "sonar.projectKey", "DivorceOrchestrationService"
        property "sonar.projectName", "Divorce :: DivorceOrhcestrationService"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.jacoco.itReportPath", "${project.buildDir}/jacoco/apiTest.exec"
        property "sonar.exclusions", sonarExclusions.join(", ")
    }
}

jacocoTestReport {
    executionData(test)

    reports {
        xml {
            enabled true
        }

        html {
            enabled true
        }
    }
}

def debug = System.getProperty("debug")
run {
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5010']
    }
}
